function data()
return {
	type = "ASSET_TRACK",
	description = {
		name = _("El-Signale"),
		description = _("El_zusatzsignaltafeln_desc")
	},
	availability = {
		yearFrom = 1910,
		yearTo = 0,
	},
	buildMode = "MULTI",
	categories = { "MW Signal Assets" },
	order = 1,
	skipCollision = true,
	autoRemovable = false,

	params = {
		{
			key = "signType",
			name = _("El-Signal"),
			uiType = "ICON_BUTTON",
			values = { "ui/construction/parameters/elsignale/el_1.tga", "ui/construction/parameters/elsignale/el_1v.tga", "ui/construction/parameters/elsignale/el_2.tga", "ui/construction/parameters/elsignale/el_3.tga", "ui/construction/parameters/elsignale/el_4.tga", "ui/construction/parameters/elsignale/el_5.tga", "ui/construction/parameters/elsignale/el_6.tga", "ui/construction/parameters/elsignale/el_7.tga", "ui/construction/parameters/elsignale/el_15kv.tga", "ui/construction/parameters/elsignale/el_gleich.tga", "ui/construction/parameters/elsignale/el_schutz_offen.tga", "ui/construction/parameters/elsignale/el_schutz_zu.tga", "ui/construction/parameters/elsignale/el_schutz.tga", },
			defaultIndex = 0,
			tooltip = _("tooltip_el_signal"),
		},
		{
			key = "signalPosition",
			name = _("Standort"),
			values = { _("rechts"), _("links") },
			defaultIndex = 0,
			tooltip = _("tooltip_position"),
		},
		{
			key = "version",
			name = _("Version"),
			values = { _("alt"), _("neu") },
			defaultIndex = 1,
			tooltip = _("tooltip_version"),
		},
		{
			key = "hoehe",
			name = _("Höhe"),
			values = { _("hoch"), _("standard"), _("gleishöhe"), _("boden") },
			defaultIndex = 1,
			tooltip = _("tooltip_height"),
		},
		{
			key = "mast",
			name = _("Mast"),
			values = { _("nein"), _("ja") },
			defaultIndex = 1,
			tooltip = _("tooltip_pole"),
		},
		{
			key = "pfeil",
			name = _("Pfeil"),
			values = { _("X"), _("links"), _("rechts"), _("doppelt"), _("gerade") },
			defaultIndex = 0,
			tooltip = _("tooltip_arrow"),
		},
		{
			key = "signaldistanceEl",
			name = _("Verschub für Signal Distance Mod"),
			values = { _("nein"), _("ja") },
			defaultIndex = 0,
			tooltip = _("tooltip_distance"),
		},
		{
			key = "zOffset",
			name = _("Höhenanpassung"),
			uiType = "SLIDER",
			values = { "-50", "-49", "-48", "-47", "-46", "-45", "-44", "-43", "-42", "-41", "-40", "-39", "-38", "-37", "-36", "-35", "-34", "-33", "-32", "-31", "-30", "-29", "-28", "-27", "-26", "-25", "-24", "-23", "-22", "-21", "-20", "-19", "-18", "-17", "-16", "-15", "-14", _"-13", "-12", "-11", "-10", "-9", "-8", "-7", "-6", "-5", "-4", "-3", "-2", "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50" },
			defaultIndex = 50,
			tooltip = _("tooltip_heightadjust"),
		},
		{
			key = "snappingType",
			name = _("Snapping für Signale"),
			values = { _("X"), _("H/V 48|51"), _("H/V 59"), _("H/V 69"), _("H/V Kompakt") },
			defaultIndex = 0,
			tooltip = _("tooltip_snapping"),
		},
		{
			key = "snappingHoehe",
			name = _("ca. Höhe für Signalsnapping"),
			values = { _("4 m"), _("5 m"), _("5,5 m"), _("6,5 m"), _("8 m") },
			defaultIndex = 0,
			tooltip = _("tooltip_snapping_height"),
		},
	},

	updateFn = function(params)
		local result = { }
		result.models = { }
		result.groundFaces = { }

		local xPosition = 0
		local zPosition = 0
		local zPositionOffset1 = 0
		local zPositionOffset2 = 0
		local yPosition = 0
		local yPositionEl = 0
		local zPositionSignal = 0
		local signalDistanceEl = 0
		local versionValue = ""
		local ElValue = ""


		if params.zOffset == 50 then
			zPositionOffset2 = "0"
		else
			zPositionOffset2 = tostring((params.zOffset - 50)*0.08)
		end


		if params.snappingType == 1 then
			xPosition = 0.095
			if params.signalPosition == 0 then
				yPositionEl = 0.1
				else
				yPositionEl = -0.1
				end
			if params.snappingHoehe == 0 then
				zPositionSignal = 0.75
			elseif params.snappingHoehe == 1 then
				zPositionSignal = 1.2
			elseif params.snappingHoehe == 2 then
				zPositionSignal = 1.8
			elseif params.snappingHoehe == 3 then
				zPositionSignal = 2.1
			elseif params.snappingHoehe == 4 then
				zPositionSignal = 2.9
			end
		elseif params.snappingType == 2 then
			xPosition = 0.095
			if params.signalPosition == 0 then
				yPositionEl = 0.1
				else
				yPositionEl = -0.1
				end
			if params.snappingHoehe == 0 then
				zPositionSignal = 0.75
			elseif params.snappingHoehe == 1 then
				zPositionSignal = 1.2
			elseif params.snappingHoehe == 2 then
				zPositionSignal = 1.8
			elseif params.snappingHoehe == 3 then
				zPositionSignal = 2.1
			elseif params.snappingHoehe == 4 then
				zPositionSignal = 2.9
			end
		elseif params.snappingType == 3 then
			xPosition = 0.095
			if params.signalPosition == 0 then
				yPositionEl = 0.05
				else
				yPositionEl = -0.05
				end
			if params.snappingHoehe == 0 then
				zPositionSignal = 0.4
			elseif params.snappingHoehe == 1 then
				zPositionSignal = 1.0
			elseif params.snappingHoehe == 2 then
				zPositionSignal = 1.85
			elseif params.snappingHoehe == 3 then
				zPositionSignal = 2
			elseif params.snappingHoehe == 4 then
				zPositionSignal = 2
			end
		elseif params.snappingType == 4 then
			xPosition = 0.15
			if params.signalPosition == 0 then
				yPositionEl = 0.4
				else
				yPositionEl = -0.4
				end
			if params.snappingHoehe == 0 then
				zPositionSignal = -0.2
			elseif params.snappingHoehe == 1 then
				zPositionSignal = 1.75
			elseif params.snappingHoehe == 2 then
				zPositionSignal = 2.30
			elseif params.snappingHoehe == 3 then
				zPositionSignal = 1.7
			elseif params.snappingHoehe == 4 then
				zPositionSignal = 1.7
			end
		end



		if params.signaldistanceEl == 0 then
			signalDistanceEl = 0.01
		elseif params.signaldistanceEl == 1 then
			signalDistanceEl = -7.988
		end


		if params.signalPosition == 0 then
			yPosition = 2.15
		elseif params.signalPosition == 1 then
			yPosition = -2.05
		end


		if params.hoehe == 0 then
			zPosition = 0.4
		elseif params.hoehe == 1 then
			zPosition = 0
		elseif params.hoehe == 2 then
			zPosition = -1.25
		elseif params.hoehe == 3 then
			zPosition = -1.55
		end


		if params.signType == 0 then
			ElValue = "1"
		elseif params.signType == 1 then
			ElValue = "1v"
		elseif params.signType == 2 then
			ElValue = "2"
		elseif params.signType == 3 then
			ElValue = "3"
		elseif params.signType == 4 then
			ElValue = "4"
		elseif params.signType == 5 then
			ElValue = "5"
		elseif params.signType == 6 then
			ElValue = "6"
		elseif params.signType == 7 then
			ElValue = "7"
		elseif params.signType == 8 then
			ElValue = "15kv"
		elseif params.signType == 9 then
			ElValue = "gleich"
		end


		if params.version == 0 then
			versionValue = "_alt"
		elseif params.version == 1 then
			versionValue = ""
		end
	if params.signType <= 9 then
		if params.mast == 1 then
			if params.snappingType == 0 then
			result.models[#result.models+1] = {
					id = "railroad/lfsignale/mast_lf_6_7.mdl",
					transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, signalDistanceEl+xPosition, yPosition-0.05, 0.4+zPosition+zPositionOffset2, 1 },
				}
			end
		end


		if params.pfeil == 1 then
			result.models[#result.models+1] = {
					id = "railroad/lfsignale/el_pfeil_l.mdl",
					transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, signalDistanceEl-0.041+xPosition, yPosition-0.05+yPositionEl, 0.5+zPosition+zPositionSignal+zPositionOffset2+0.4, 1 },
				}
		elseif params.pfeil == 2 then
			result.models[#result.models+1] = {
					id = "railroad/lfsignale/el_pfeil_r.mdl",
					transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, signalDistanceEl-0.041+xPosition, yPosition-0.05+yPositionEl, 0.5+zPosition+zPositionSignal+zPositionOffset2+0.4, 1 },
				}
		elseif params.pfeil == 3 then
			result.models[#result.models+1] = {
					id = "railroad/lfsignale/el_pfeildoppelt.mdl",
					transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, signalDistanceEl-0.041+xPosition, yPosition-0.05+yPositionEl, 0.5+zPosition+zPositionSignal+zPositionOffset2+0.4, 1 },
				}
		elseif params.pfeil == 4 then
			result.models[#result.models+1] = {
					id = "railroad/lfsignale/el_pfeil_g.mdl",
					transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, signalDistanceEl-0.041+xPosition, yPosition-0.05+yPositionEl, 0.5+zPosition+zPositionSignal+zPositionOffset2+0.4, 1 },
				}
		end
			result.models[#result.models+1] = {
					id = "railroad/lfsignale/el_"..ElValue..""..versionValue..".mdl",
					transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, signalDistanceEl-0.041+xPosition, yPosition-0.05+yPositionEl, 0.5+zPosition+zPositionSignal+zPositionOffset2, 1 },
				}
	elseif params.signType == 10 then
		if params.signalPosition == 0 then
			result.models[#result.models+1] = {
					id = "railroad/lfsignale/el_schutz_offen.mdl",
					transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, signalDistanceEl, 2.5, 0.5+0.4, 1 },
				}
		else
			result.models[#result.models+1] = {
					id = "railroad/lfsignale/el_schutz_offen.mdl",
					transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, signalDistanceEl, -2.5, 0.5+0.4, 1 },
				}
		end
	elseif params.signType == 11 then
		if params.signalPosition == 0 then
			result.models[#result.models+1] = {
					id = "railroad/lfsignale/el_schutz_zu.mdl",
					transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, signalDistanceEl, 2.5, 0.5+0.4, 1 },
				}
		else
			result.models[#result.models+1] = {
					id = "railroad/lfsignale/el_schutz_zu.mdl",
					transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, signalDistanceEl, -2.5, 0.5+0.4, 1 },
				}
		end
	elseif params.signType == 12 then
		if params.signalPosition == 0 then
			result.models[#result.models+1] = {
					id = "railroad/lfsignale/el_schutz.mdl",
					transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, signalDistanceEl, 2.5, 0.5+0.4, 1 },
				}
		else
			result.models[#result.models+1] = {
					id = "railroad/lfsignale/el_schutz.mdl",
					transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, signalDistanceEl, -2.5, 0.5+0.4, 1 },
				}
		end
	end








		result.groundFaces[1] = { face = { {0.01, -0.01}, { 0.01, 0.01}, {-0.01, 0.01}, {-0.01, -0.01} }, modes = { { type = "FILL", key = "industry_floor.lua" } } }

		result.terrainAlignmentLists = {
            {
    			type = "EQUAL",
    			faces =  { },
    		},
        }

		return result
	end
}

end
