local vec3 = require "vec3"
local transf = require "transf"
local constructionutil = require "constructionutil"
function data()
return {
	type = "ASSET_TRACK",
	description = {
		name = _("Lf1 & Baustellenzubehör"),
		description = _("Lf1_zusatzsignaltafeln_desc")
	},
	availability = {
		yearFrom = 1850,
		yearTo = 0,
	},
	buildMode = "MULTI",
	categories = { "MW Signal Assets" },
	order = 1,
	skipCollision = true,
	autoRemovable = false,

	params = {
		{
			key = "signType",
			name = _("Lf-Signal"),
			uiType = "ICON_BUTTON",
			values = { "ui/construction/parameters/lfsignale/lf1.tga", "ui/construction/parameters/lfsignale/lf2.tga", "ui/construction/parameters/lfsignale/lf3.tga", "ui/construction/parameters/lfsignale/bausperre_rund.tga", "ui/construction/parameters/lfsignale/bausperre_eckig.tga",},
			defaultIndex = 0,
			tooltip = _("tooltip_lf1_signal"),
		},
		{
			key = "signalPosition",
			name = _("Standort"),
			values = { _("rechts"), _("links") },
			defaultIndex = 0,
			tooltip = _("tooltip_position"),
		},
		{
			key = "kennzifferLf",
			name = _("Geschwindigkeit in km/h"),
			uiType = "COMBOBOX",
			values = {  "10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "110", "120", "130", "140", "150", "160" },
			defaultIndex = 1,
			tooltip = _("tooltip_speed"),
		},
		{
			key = "hoeheLf1",
			name = _("Höhe"),
			values = { _("niedrig"), _("standard"), _("hoch") },
			defaultIndex = 1,
			tooltip = _("tooltip_height"),
		},
		{
			key = "licht",
			name = _("Beleuchtung"),
			values = { _("Lampe DRG 1"), _("Lampe DRG 2"), _("moderne Lampe") },
			defaultIndex = 3,
			tooltip = _("tooltip_lighting"),
		},
		{
			key = "signaldistanceLf1",
			name = _("Verschub für Signal Distance Mod"),
			values = { _("nein"), _("ja") },
			defaultIndex = 0,
			tooltip = _("tooltip_distance"),
		},
	},

	updateFn = function(params)
		local result = { }
		result.models = { }
		result.groundFaces = { }

		local xPosition = 0
		local zPosition = 0
		local zPositionOffset1 = 0
		local zPositionOffset2 = 0
		local zPositionLf = 0
		local zPositionSignal = 0
		local yPosition = 0
		local yPositionLf = 0
		local kzNumberLf = 0
		local signalDistanceLf = 0
		local rotationValue = 0
		local LfValue = ""

		if params.kennzifferLf == 0 then
			kzNumberLf = "10"
		else
			kzNumberLf = tostring(params.kennzifferLf * 10 + 10)
		end

		if params.signaldistanceLf1 == 0 then
			signalDistanceLf1 = 0.01
		elseif params.signaldistanceLf1 == 1 then
			signalDistanceLf1 = -7.988
		end


		if params.signalPosition == 0 then
			yPosition = 0
			rotationValue = 0
		elseif params.signalPosition == 1 then
			yPosition = -6.525
			rotationValue = 180
		end



	--[[	if params.signType == 0 then
			LfValue = "6"
		else
			LfValue = "7"
		end]]


if params.signType <= 2 then
	if params.hoeheLf1 == 2 then
		if params.licht == 0 then
			result.models[#result.models+1] = {
					id = "railroad/lfsignale/lf_lampe_drg.mdl",
					transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, signalDistanceLf1, yPosition, 0.9, 1 },
				}
		elseif params.licht == 1 then
			result.models[#result.models+1] = {
					id = "railroad/lfsignale/lf_lampe_drg_2.mdl",
					transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, signalDistanceLf1, yPosition, 0.9, 1 },
				}
		elseif params.licht == 2 then
			result.models[#result.models+1] = {
					id = "railroad/lfsignale/lf_lampe_modern.mdl",
					transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, signalDistanceLf1, yPosition, 0.9, 1 },
				}
		end
	end


		if params.hoeheLf1 == 0 then
			result.models[#result.models+1] = {
					id = "railroad/lfsignale/mast_halter_niedrig.mdl",
					transf = transf.rotZYXTransl(transf.degToRad(rotationValue, .0, .0), vec3.new(signalDistanceLf1, 0, 1.06)),
				}
				yPosition = -1.02
				zPosition = -0.6
		elseif params.hoeheLf1 == 1 then
			result.models[#result.models+1] = {
					id = "railroad/lfsignale/mast_halter_hoch.mdl",
					transf = transf.rotZYXTransl(transf.degToRad(rotationValue, .0, .0), vec3.new(signalDistanceLf1, 0, 1)),
				}
		elseif params.hoeheLf1 == 2 then
			result.models[#result.models+1] = {
					id = "railroad/lfsignale/mast_halter_hoch_2.mdl",
					transf = transf.rotZYXTransl(transf.degToRad(rotationValue, .0, .0), vec3.new(signalDistanceLf1, 0, 1)),
				}
				zPosition = 0.75
		end
end



		if params.signType == 0 then
			result.models[#result.models+1] = {
					id = "railroad/lfsignale/lf_1_kz_"..kzNumberLf..".mdl",
					transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, signalDistanceLf1-0.05, yPosition+3.27, 0.05+zPosition, 1 },
				}
		elseif params.signType == 1 then
			result.models[#result.models+1] = {
					id = "railroad/lfsignale/lf_2.mdl",
					transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, signalDistanceLf1, yPosition+3.27, 1.8+zPosition, 1 },
				}
		elseif params.signType == 2 then
			result.models[#result.models+1] = {
					id = "railroad/lfsignale/lf_3.mdl",
					transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, signalDistanceLf1, yPosition+3.27, 1.8+zPosition, 1 },
				}
		elseif params.signType == 3 then
			result.models[#result.models+1] = {
					id = "railroad/lfsignale/bausperre_rund.mdl",
					transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, signalDistanceLf1, 0.05, 0.5+0.4, 1 },
				}
		elseif params.signType == 4 then
			result.models[#result.models+1] = {
					id = "railroad/lfsignale/bausperre_eckig.mdl",
					transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, signalDistanceLf1, 0.05, 0.5+0.4, 1 },
				}
		end





		result.groundFaces[1] = { face = { {0.01, -0.01}, { 0.01, 0.01}, {-0.01, 0.01}, {-0.01, -0.01} }, modes = { { type = "FILL", key = "industry_floor.lua" } } }

		result.terrainAlignmentLists = {
            {
    			type = "EQUAL",
    			faces =  { },
    		},
        }

		return result
	end
}

end
